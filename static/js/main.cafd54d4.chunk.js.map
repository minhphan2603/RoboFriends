{"version":3,"sources":["Card.jsx","Cardlist.jsx","robots.js","SearchBox.jsx","App.jsx","action.jsx","constants.jsx","serviceWorker.js","reducers.jsx","index.js"],"names":["Card","props","id","name","email","react_default","a","createElement","className","src","alt","Cardlist","_ref","robots","cardArray","i","length","push","src_Card_0","key","username","SearchBox","searchChange","searchField","type","placeholder","onChange","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","filteredRobots","filter","robot","toLowerCase","includes","src_SearchBox","onSearchChange","src_Cardlist","Component","connect","console","log","dispatch","event","payload","target","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","objectSpread","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cafd54d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n    const {id, name, email} = props;\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={'https://robohash.org/' + id + '?200x200'} alt=\"robot\"/>\r\n            <div>\r\n                <h1 className=\"f3\">{name}</h1>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n    const cardArray = [];\r\n    for (let i = 0; i<robots.length; i++){\r\n        cardArray.push(<Card key={i} id={robots[i].id} name ={robots[i].name} email={robots[i].email}/>);\r\n    }\r\n    return (\r\n        <div>\r\n            {/* {robots.map((user,i) => <Card id={i} />)} */}\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange , searchField}) => {\r\n    const x = 1;\r\n    return (\r\n        <div>\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type=\"search\" \r\n            placeholder=\"search robots\"\r\n            onChange = {searchChange}\r\n            value={searchField}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, {Component}from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {setSearchField} from './action';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            robots : robots,\r\n            // searchField : '',\r\n        }\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     // const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(event.target.value.toLowerCase()))\r\n    //     this.setState({\r\n    //         searchField: event.target.value,\r\n    //         // robots: filteredRobots\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(this.props.searchField.toLowerCase()))\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox searchChange ={this.props.onSearchChange} searchField={this.props.searchField}/>\r\n                <Cardlist robots={filteredRobots} />   \r\n            </div>\r\n            \r\n        )\r\n    }\r\n    componentDidMount() {\r\n        // console.log(this.props.store);\r\n        // console.log(this.props.store.getState());\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    console.log('mapStateToProps', state);\r\n    return {\r\n        searchField: state.searchField\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    console.log('mapDispatchToProps', dispatch);\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHAGNE_SEARCH_FIELD} from './constants';\r\n\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHAGNE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}","export const CHAGNE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHAGNE_SEARCH_FIELD} from './constants';\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    switch(action.type) {\r\n        case CHAGNE_SEARCH_FIELD :\r\n            return {...state, searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\n// import Cardlist from './Cardlist'\n// import {robots} from './robots'\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport {searchRobots} from './reducers';\n\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>\n                , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}